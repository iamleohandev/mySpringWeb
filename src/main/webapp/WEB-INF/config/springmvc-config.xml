<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">


	<context:component-scan base-package="com.leo.han"
		annotation-config="true" use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<mvc:annotation-driven></mvc:annotation-driven>


	<!--***specifying where to find the speicific jsp or view implementation 
		based on the logic view name*** -->

	<!-- Multiple view resolver set property order -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsps/"></property>
		<property name="suffix" value=".jsp"></property>
		<property name="order" value="1"></property>
	</bean>


	<!-- Configure the viewResolver as TilesViewResolver to use the apache tiles 
		to render the views -->



	<bean id="viewTileResolver"
		class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<property name="order" value="0"></property>
	</bean>


	<!-- Configure the tilesConfigurer to read the layout definition xml file 
		for contruct the page -->
	<bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer"
		id="tilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/layouts/layout.xml</value>
			</list>
		</property>
	</bean>



	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources location="/resources/" mapping="/resources/**" />





	<!-- ************************Configuration for locale in Spring************************************************************* -->

	<!--***specifying where are stored messages*** -->
	<!-- ResourceBundleMessageSource read the properties resources for future 
		use use Set the messageSource bean to read the localized data from resource 
		bundles. -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:i18n/message" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!--***specifying where to find and store current locale*** -->
	<!-- LocaleResolver maintains user sessions in the client request so that 
		further requests can easily recognize the user locale. -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="en"></property>
	</bean>

	<!--***specifying the interceptor responsible to change the current locale 
		based on the presence of a particular parameter *** -->
	<!-- LocaleInterceptor interceptor is configured to intercept the user request 
		and identify the user locale. The parameter name is configurable and we are 
		using request parameter name for locale as “locale”. Without this interceptor, 
		we won’t be able to change the user locale and send the response based on 
		the new locale settings of the user. It needs to be part of interceptors 
		element otherwise Spring won’t configure it as an interceptor. -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="language"></property>
		</bean>
	</mvc:interceptors>


</beans>
